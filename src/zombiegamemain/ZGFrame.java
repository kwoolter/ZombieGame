/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package zombiegamemain;

import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;

/**
 *
 * @author JaneW
 */
public class ZGFrame extends javax.swing.JFrame {

    private ZGTurnView view;
    private ZGPlayerTurn turn;
    private ZGGame game;
    private int iCurrentPlayer;

    /**
     * Creates new form ZGFrame
     */
    public ZGFrame() {

        view = new ZGTurnView();

        initialise();

        getContentPane().add(view);

        initComponents();

        view.setBounds(panelGame.getWidth(), 0, 400, 800);
        view.setVisible(true);

        this.setTitle("Zombie Dice Game");
        this.setSize(panelGame.getWidth() + view.getWidth(), 600);
        this.setPreferredSize(new Dimension(panelGame.getWidth() + view.getWidth(), 600));

        txtPlayers.setBorder(javax.swing.BorderFactory.createEmptyBorder());

        // Centre in the middle of the screen
        this.setLocationRelativeTo(null);
        this.pack();

        // So that we can pick up keystrokes
        setFocusable(true);
    }

    private void initialise() {
        game = new ZGGame();
        game.addPlayer(new ZGPlayer("Keith"));
        game.addPlayer(new ZGPlayer("Oliver"));
        game.addPlayer(new ZGPlayer("Jack"));

    }

    void setGUIState() {

        ZGPlayerTurn.ZGTurnState state;
        ZGGame.ZGGameState gameState = game.getGameState();

        if (turn == null || gameState == ZGGame.ZGGameState.END  || gameState == ZGGame.ZGGameState.START) {
            this.butContinue.setEnabled(false);
            this.butStop.setEnabled(false);
            this.butStart.setEnabled(true);
            this.butStart.setText("New Game");
        } else {
            state = turn.getTurnState();

            switch (state) {
                case START:
                    this.butContinue.setEnabled(true);
                    this.butStop.setEnabled(false);
                    this.butStart.setEnabled(false);
                    break;
                case CHOOSE:
                    this.butContinue.setEnabled(true);
                    this.butStop.setEnabled(true);
                    this.butStart.setEnabled(false);
                    break;
                case DEAD:
                    this.butContinue.setEnabled(false);
                    this.butStop.setEnabled(false);
                    this.butStart.setEnabled(true);
                    this.butStart.setText("Next Player");
                    break;
                case END:
                    this.butContinue.setEnabled(false);
                    this.butStop.setEnabled(false);
                    this.butStart.setEnabled(true);
                    this.butStart.setText("Next Player");
                    break;
                default:
            }
        }
    }

    @Override
    public void paint(Graphics g) {

        super.paint(g);
        setGUIState();

        ArrayList<ZGPlayer> players = game.getLeaderBoard();
        txtPlayers.setText("");

        // Is it Game over?
        // Then display the winners...
        if (game.isGameOver() == true) {
            txtPlayers.append("GAME OVER\nWinner...\n");
            int iWinningScore = players.get(0).getScore();
            for (int i = 0; i < players.size(); i++) {
                ZGPlayer selected = players.get(i);
                if (selected.getScore() == iWinningScore) {
                    txtPlayers.append(selected.getName() + " : " + selected.getScore() + "\n");
                }
            }
        } // else display the leader board...
        else {
            txtPlayers.append("Round " + game.getTurns() + "\n");
            int iLastScore = 0, iLastRank = 0;
            for (int i = 0; i < players.size(); i++) {
                ZGPlayer selected = players.get(i);

                // Logic for handling players on the same score...
                if (selected.getScore() != iLastScore) {
                    iLastRank = i;
                }
                iLastScore = selected.getScore();
                txtPlayers.append((iLastRank + 1) + ". " + selected.getName() + " : " + selected.getScore() + "\n");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGame = new javax.swing.JPanel();
        butStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPlayers = new javax.swing.JTextArea();
        butStop = new javax.swing.JButton();
        butContinue = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));

        panelGame.setBackground(new java.awt.Color(255, 255, 204));

        butStart.setBackground(new java.awt.Color(204, 0, 0));
        butStart.setFont(new java.awt.Font("Chiller", 0, 36)); // NOI18N
        butStart.setForeground(new java.awt.Color(255, 255, 255));
        butStart.setText("Start");
        butStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStartActionPerformed(evt);
            }
        });

        txtPlayers.setBackground(new java.awt.Color(255, 255, 204));
        txtPlayers.setColumns(20);
        txtPlayers.setEditable(false);
        txtPlayers.setFont(new java.awt.Font("Chiller", 0, 36)); // NOI18N
        txtPlayers.setForeground(new java.awt.Color(204, 0, 0));
        txtPlayers.setLineWrap(true);
        txtPlayers.setRows(5);
        txtPlayers.setWrapStyleWord(true);
        txtPlayers.setAutoscrolls(false);
        txtPlayers.setBorder(null);
        txtPlayers.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtPlayers.setFocusable(false);
        txtPlayers.setMargin(new java.awt.Insets(2, 6, 2, 2));
        txtPlayers.setName("Leader Board");
        txtPlayers.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(txtPlayers);

        butStop.setBackground(new java.awt.Color(204, 0, 0));
        butStop.setFont(new java.awt.Font("Chiller", 0, 36)); // NOI18N
        butStop.setForeground(new java.awt.Color(255, 255, 255));
        butStop.setText("Stop and Score");
        butStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStopActionPerformed(evt);
            }
        });

        butContinue.setBackground(new java.awt.Color(204, 0, 0));
        butContinue.setFont(new java.awt.Font("Chiller", 0, 36)); // NOI18N
        butContinue.setForeground(new java.awt.Color(255, 255, 255));
        butContinue.setText("Keep Going");
        butContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butContinueActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zombiegamemain/resources/ZombieDice.jpg"))); // NOI18N
        jLabel2.setToolTipText("");

        javax.swing.GroupLayout panelGameLayout = new javax.swing.GroupLayout(panelGame);
        panelGame.setLayout(panelGameLayout);
        panelGameLayout.setHorizontalGroup(
            panelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                    .addComponent(butStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butContinue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelGameLayout.setVerticalGroup(
            panelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addGap(12, 12, 12)
                .addComponent(butContinue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butStop, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butStart)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 387, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStartActionPerformed
        // TODO add your handling code here:

        if (game.getGameState() == ZGGame.ZGGameState.END || game.getGameState() == ZGGame.ZGGameState.START) {
            initialise();
            game.startGame();
            turn = new ZGPlayerTurn(game.getCurrentPlayer());
            view.setTurn(turn);
        } else {
            turn = new ZGPlayerTurn(game.getNextPlayer());
            view.setTurn(turn);

            try {
                turn.getDice();
                turn.rollDice();
                turn.analyze();
                turn.print();
            } catch (ZGException e) {
                System.out.println(e);
                turn.endTurn();
            }
        }

        repaint();

    }//GEN-LAST:event_butStartActionPerformed

    private void butContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butContinueActionPerformed
        // TODO add your handling code here:
        try {
            turn.getDice();
            turn.rollDice();
            turn.analyze();
            turn.print();
        } catch (ZGException e) {
            System.out.println(e);
            turn.endTurn();
        }

        this.repaint();
    }//GEN-LAST:event_butContinueActionPerformed

    private void butStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStopActionPerformed
        // TODO add your handling code here:
        turn.endTurn();

        this.repaint();
    }//GEN-LAST:event_butStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;










                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ZGFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butContinue;
    private javax.swing.JButton butStart;
    private javax.swing.JButton butStop;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelGame;
    private javax.swing.JTextArea txtPlayers;
    // End of variables declaration//GEN-END:variables
}
