/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package zombiegamemain;

import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author JaneW
 */
public class ZGTurnView extends javax.swing.JPanel {

    private ZGPlayerTurn turn;

    /**
     * Creates new form ZGTurnView
     */
    public ZGTurnView() {
        initComponents();

        ZGDiceView.setViewWidth(60);
        ZGDiceView.setViewHeight(60);
    }

    public void setTurn(ZGPlayerTurn turn) {
        this.turn = turn;
    }

    @Override
    public void paint(Graphics g) {

        super.paint(g);
        if (turn == null) {
            labPlayer.setText("????");
            labScore.setText("?");
            labShots.setText("?");
            labBrains.setText("?");
        } else {

            labPlayer.setText(turn.getPlayer().getName());
            labScore.setText(Integer.toString(turn.getPlayer().getScore()));
            labShots.setText(Integer.toString(turn.getShots()));
            labBrains.setText(Integer.toString(turn.getBrains()));
            try {
                ArrayList<ZGDice> diceTemp;
                diceTemp = turn.getDiceRoll();

                ZGDiceView.setViewWidth(70);
                ZGDiceView.setViewHeight(70);

                for (int i = 0; i < diceTemp.size(); i++) {
                    ZGDice dice = diceTemp.get(i);
                    ZGDiceView view = new ZGDiceView(dice);

                    view.draw(g, (ZGDiceView.getViewWidth() + 10) * i, this.panelStatus.getHeight() + 10);
                }

                ZGDiceView.setViewWidth(30);
                ZGDiceView.setViewHeight(30);

                // Draw the number of shots
                diceTemp = turn.getDiceShots();

                for (int i = 0; i < diceTemp.size(); i++) {
                    ZGDice dice = diceTemp.get(i);
                    ZGDiceView view = new ZGDiceView(dice);

                    view.draw(g, (ZGDiceView.getViewWidth() + 10) * i, this.panelStatus.getHeight() + 150);
                }

                // Draw the number of Brains
                diceTemp = turn.getDiceBrains();
                int x = 0, y = this.panelStatus.getHeight() + 190;

                for (int i = 0; i < diceTemp.size(); i++) {

                    ZGDice dice = diceTemp.get(i);
                    ZGDiceView view = new ZGDiceView(dice);
                    view.draw(g, x, y);

                    if (i > 0 && ((i + 1) % 5) == 0) {
                        y += ZGDiceView.getViewHeight() + 10;
                        x = 0;
                    } else {
                        x += (ZGDiceView.getViewWidth() + 10);
                    }
                }

            } catch (ZGException e) {
                System.out.println(e);
                //turn.endTurn();
            }
            // Special graphics
            if (turn.getTurnState() == ZGPlayerTurn.ZGTurnState.DEAD) {
                ImageIcon ii = new ImageIcon(this.getClass().getResource("resources/zombie.png"));
                Image img = ii.getImage();
                g.drawImage(img, 10, 200, null);
            } else if (turn.getBrains() == 13) {
                ImageIcon ii = new ImageIcon(this.getClass().getResource("resources/ZombieWin.png"));
                Image img = ii.getImage();
                g.drawImage(img, 10, 200, null);
            } else if (turn.getBrains() > 6) {
                int iBrains = turn.getBrains();
                int iWidth, iHeight;
                ImageIcon ii = new ImageIcon(this.getClass().getResource("resources/bigbrain.png"));
                Image img = ii.getImage();

                iWidth = img.getWidth(null);
                iHeight = img.getHeight(null);

                g.drawImage(img, 0, 500 - (iHeight * iBrains) / 30, (iWidth * iBrains) / 30, (iHeight * iBrains) / 30, null);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelStatus = new javax.swing.JPanel();
        labPlayer = new javax.swing.JLabel();
        labScore = new javax.swing.JLabel();
        labShots = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labBrains = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));

        panelStatus.setBackground(new java.awt.Color(255, 255, 204));

        labPlayer.setFont(new java.awt.Font("Chiller", 1, 36)); // NOI18N
        labPlayer.setText("labPlayer");
        labPlayer.setToolTipText("");

        labScore.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        labScore.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labScore.setText("labScore");
        labScore.setToolTipText("");

        labShots.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        labShots.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labShots.setText("Shots");
        labShots.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Chiller", 0, 24)); // NOI18N
        jLabel1.setText("Shots =");

        jLabel2.setFont(new java.awt.Font("Chiller", 0, 24)); // NOI18N
        jLabel2.setText("Brains =");

        labBrains.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        labBrains.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labBrains.setText("Brains");
        labBrains.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Chiller", 0, 24)); // NOI18N
        jLabel3.setText("Score =");

        javax.swing.GroupLayout panelStatusLayout = new javax.swing.GroupLayout(panelStatus);
        panelStatus.setLayout(panelStatusLayout);
        panelStatusLayout.setHorizontalGroup(
            panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStatusLayout.createSequentialGroup()
                .addGroup(panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStatusLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labScore))
                    .addComponent(labPlayer))
                .addGap(18, 18, 18)
                .addGroup(panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStatusLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labBrains))
                    .addGroup(panelStatusLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labShots)))
                .addContainerGap(171, Short.MAX_VALUE))
        );
        panelStatusLayout.setVerticalGroup(
            panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStatusLayout.createSequentialGroup()
                .addGroup(panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labPlayer)
                    .addComponent(jLabel1)
                    .addComponent(labShots))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(labScore)
                    .addComponent(jLabel2)
                    .addComponent(labBrains))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 271, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labBrains;
    private javax.swing.JLabel labPlayer;
    private javax.swing.JLabel labScore;
    private javax.swing.JLabel labShots;
    private javax.swing.JPanel panelStatus;
    // End of variables declaration//GEN-END:variables
}
